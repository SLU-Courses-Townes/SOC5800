library(boot) # functions for regression analysis
library(generalhoslem) # Hosmer-Lemeshow test for binary and multinomial logistic models
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(ltm) # functions for latent trait models under Item Response Theory
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for pseudo R2 measures for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemeshow goodness of fit test
library(psy) # functions for various procedures used in psychometry
library(psych) # Procedures for Psychological, Psychometric, and Personality Research
dataRaw <- read.csv(here("Data","DataRaw","SOC5800_Data_NumericValues_Raw_CSV.csv"),
sep = ",", header = TRUE, fill = TRUE, dec = ".")
dataRaw %>%
dplyr::rename(startDate = StartDate,
endDate = EndDate,
status = Status,
IPaddress = IPAddress,
progress = Progress,
sessionDuration = Duration..in.seconds.,
surveyCompleted = Finished,
surveyDate = RecordedDate,
responseID = ResponseId,
locationLat = LocationLatitude,
locationLong = LocationLongitude,
consent = Q43,
browserName = Q10_Browser,
browserVersion = Q10_Version,
opSyst = Q10_Operating.System,
screenRes = Q10_Resolution,
currentlyIncarcerated = Q1,
currentlyDetained = Q2,
residentialTreatment = Q3,
involCommitment = Q4,
gender = Q5,
genderSelfDescribe = Q5_3_TEXT,
transgender = Q7,
ethnicityRace = Q6,
ethnicityRaceOther = Q6_10_TEXT,
typeHometown = Q8,
religiousAffiliation = Q9,
ReligiousOther = Q9_12_TEXT,
ageNow = Q11,
ageRelease = Q13,
incarcerationYears = Q14.1_1,
incarcerationMonths = Q14.2_1,
educationLevels = Q15,
whenHighestEd = Q16,
relationshipStatus = Q17,
householdSize = Q18,
financialSupportInitial = Q19,
financialSupportGovt = Q19_4_TEXT,
financialSupportNonGovt = Q19_5_TEXT,
finanicalSupportOther = Q19_6_TEXT,
selfEmployment = Q20,
incomeInitial = Q21,
incomeLastYr = Q22,
managingFinancially = Q23,
savings = Q24,
pssQ1 = Q41_1,
pssQ2 = Q41_2,
pssQ3 = Q41_3,
pssQ4 = Q41_4,
pssQ5 = Q41_5,
pssQ6 = Q41_6,
pssQ7 = Q41_7,
pssQ8 = Q41_8,
pssQ9 = Q41_9,
pssQ10 = Q41_10,
pssQ11 = Q41_11,
pssQ12 = Q41_12,
issFamilyQ1 = Q30_1,
issFamilyQ2 = Q30_2,
issFamilyQ3 = Q30_3,
issFamilyQ4 = Q30_4,
issFamilyQ5 = Q30_5,
issFriendQ1 = Q31_1,
issFriendQ2 = Q31_2,
issFriendQ3 = Q31_3,
issFriendQ4 = Q31_4,
issFriendQ5 = Q31_5,
programsUsed = Q32,
importancePublicTrans = Q33_1,
importanceHousing = Q33_2,
importanceSNAP = Q33_3,
importanceWIC = Q33_4,
importanceTANF = Q33_5,
importanceEITC = Q33_6,
importanceJobTraining = Q33_7,
importanceMedicare = Q33_8,
importanceEducAid = Q33_9,
aceQ1 = Q34_1,
aceQ2 = Q34_2,
aceQ3 = Q34_3,
aceQ4 = Q34_4,
aceQ5 = Q34_5,
aceQ6 = Q34_6,
aceQ7 = Q34_7,
aceQ8 = Q34_8,
aceQ9 = Q34_9,
aceQ10 = Q34_10,
helpDuring = Q35,
helpDuringType = Q33,
helpDuringOther = Q33_8_TEXT,
helpAfter = Q36,
helpAfterType = Q44,
helpAfterOther = Q44_8_TEXT,
gritQ1 = Q35_1,
gritQ2 = Q35_2,
gritQ3 = Q35_3,
gritQ4 = Q35_4,
gritQ5 = Q35_5,
gritQ6 = Q35_6,
gritQ7 = Q35_7,
gritQ8 = Q35_8,
stayInitial = Q36.1,
stayInitialOther = Q36_6_TEXT,
foodSecurityQ1 = Q37_1,
foodSecurityQ2 = Q37_2,
mostHelpful = Q38,
greatestObstacle = Q39,
helpKind = Q40,
justiceInteraction = Q41
) -> dataRenamed
dataRenamed %>%
dplyr::select (-c(status, progress, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference)) -> dataAugmented
dataAugmented$pssQ1 <- as.numeric(dataAugmented$pssQ1)
dataAugmented$pssQ2 <- as.numeric(dataAugmented$pssQ2)
dataAugmented$pssQ3 <- as.numeric(dataAugmented$pssQ3)
dataAugmented$pssQ4 <- as.numeric(dataAugmented$pssQ4)
dataAugmented$pssQ5 <- as.numeric(dataAugmented$pssQ5)
dataAugmented$pssQ6 <- as.numeric(dataAugmented$pssQ6)
dataAugmented$pssQ7 <- as.numeric(dataAugmented$pssQ7)
dataAugmented$pssQ8 <- as.numeric(dataAugmented$pssQ8)
dataAugmented$pssQ9 <- as.numeric(dataAugmented$pssQ9)
dataAugmented$pssQ10 <- as.numeric(dataAugmented$pssQ10)
dataAugmented$pssQ11 <- as.numeric(dataAugmented$pssQ11)
dataAugmented$pssQ12 <- as.numeric(dataAugmented$pssQ12)
dataAugmented$issFamilyQ1 <- as.numeric(dataAugmented$issFamilyQ1)
dataAugmented$issFamilyQ2 <- as.numeric(dataAugmented$issFamilyQ2)
dataAugmented$issFamilyQ3 <- as.numeric(dataAugmented$issFamilyQ3)
dataAugmented$issFamilyQ4 <- as.numeric(dataAugmented$issFamilyQ4)
dataAugmented$issFamilyQ5 <- as.numeric(dataAugmented$issFamilyQ5)
dataAugmented$issFriendQ1 <- as.numeric(dataAugmented$issFriendQ1)
dataAugmented$issFriendQ2 <- as.numeric(dataAugmented$issFriendQ2)
dataAugmented$issFriendQ3 <- as.numeric(dataAugmented$issFriendQ3)
dataAugmented$issFriendQ4 <- as.numeric(dataAugmented$issFriendQ4)
dataAugmented$issFriendQ5 <- as.numeric(dataAugmented$issFriendQ5)
dataAugmented$aceQ1 <- as.numeric(dataAugmented$aceQ1)
dataAugmented$aceQ2 <- as.numeric(dataAugmented$aceQ2)
dataAugmented$aceQ3 <- as.numeric(dataAugmented$aceQ3)
dataAugmented$aceQ4 <- as.numeric(dataAugmented$aceQ4)
dataAugmented$aceQ5 <- as.numeric(dataAugmented$aceQ5)
dataAugmented$aceQ6 <- as.numeric(dataAugmented$aceQ6)
dataAugmented$aceQ7 <- as.numeric(dataAugmented$aceQ7)
dataAugmented$aceQ8 <- as.numeric(dataAugmented$aceQ8)
dataAugmented$aceQ9 <- as.numeric(dataAugmented$aceQ9)
dataAugmented$aceQ10 <- as.numeric(dataAugmented$aceQ10)
dataAugmented$gritQ1 <- as.numeric(dataAugmented$gritQ1)
dataAugmented$gritQ2 <- as.numeric(dataAugmented$gritQ2)
dataAugmented$gritQ3 <- as.numeric(dataAugmented$gritQ3)
dataAugmented$gritQ4 <- as.numeric(dataAugmented$gritQ4)
dataAugmented$gritQ5 <- as.numeric(dataAugmented$gritQ5)
dataAugmented$gritQ6 <- as.numeric(dataAugmented$gritQ6)
dataAugmented$gritQ7 <- as.numeric(dataAugmented$gritQ7)
dataAugmented$gritQ8 <- as.numeric(dataAugmented$gritQ8)
dataAugmented$ageNow <- (as.numeric(dataAugmented$ageNow)+11)
dataAugmented$ageRelease <- (as.numeric(dataAugmented$ageRelease)+11)
# Recode variables with `yes` and `no` response options as 1 and 0 respectively
dataAugmented %>%
mutate(savings = ifelse (savings == 1,1,0)) %>%
mutate(helpDuring = ifelse(helpDuring == 1,1,0)) %>%
mutate(helpAfter = ifelse(helpAfter == 1,1,0)) -> dataAugmented
#  mutate(savings = case_when(
#    as.numeric(savings) == 1 ~ 1,
#    as.numeric(savings) == 2 ~ 0,
#    TRUE ~ savings)
#  )%>%
#  mutate(helpDuring = case_when(
#    as.numeric(helpDuring) == 1 ~ 1,
#    as.numeric(helpDuring) == 2 ~ 0,
#    TRUE ~ helpDuring)
#  )%>%
#  mutate(helpAfter = case_when(
#    as.numeric(helpDuring) == 1 ~ 1,
#    as.numeric(helpDuring) == 2 ~ 0,
#    TRUE ~ helpAfter)
#    )-> dataAugmented
# Recode instances of missing data with `NA`
dataAugmented[dataAugmented==""] <- NA
dataAugmented %>%
# Calculate score for multidimensional scale for percieved social support
mutate (mspssScore = case_when(
!is.na(pssQ1)|!is.na(pssQ2)|!is.na(pssQ3)|!is.na(pssQ4)|!is.na(pssQ5)|!is.na(pssQ6)|!is.na(pssQ7)|
!is.na(pssQ8)|!is.na(pssQ9)|!is.na(pssQ10)|!is.na(pssQ11)|!is.na(pssQ12) ~
(pssQ1+pssQ2+pssQ3+pssQ4+pssQ5+pssQ6+pssQ7+pssQ8+pssQ9+pssQ10+pssQ11+pssQ12)/12)
)%>%
# Calculate score for family instrumental social support
mutate (issFamilyScore = case_when(
!is.na(issFamilyQ1)|!is.na(issFamilyQ2)|!is.na(issFamilyQ3)|!is.na(issFamilyQ4)|!is.na(issFamilyQ5)
~ (issFamilyQ1+issFamilyQ2+issFamilyQ3+issFamilyQ4+issFamilyQ5)/5)
)%>%
# Calculate score for friend instrumental social support
mutate (issFriendScore = case_when(
!is.na(issFriendQ1)|!is.na(issFriendQ2)|!is.na(issFriendQ3)|!is.na(issFriendQ4)|!is.na(issFriendQ5)
~ (issFriendQ1+issFriendQ2+issFriendQ3+issFriendQ4+issFriendQ5)/5)
)%>%
# Calculate score for total instrumental social support
mutate(issTotalScore = case_when(
!is.na(issFriendScore)|!is.na(issFamilyScore) ~ (issFamilyScore+issFriendScore)/2)
)%>%
# Calculate score for adverse childhood experience
mutate (aceScore = case_when (
!is.na(aceQ1)|!is.na(aceQ2)|!is.na(aceQ3)|!is.na(aceQ4)|!is.na(aceQ5)|!is.na(aceQ6)|!is.na(aceQ7)|
!is.na(aceQ8)|!is.na(aceQ9)|!is.na(aceQ10) ~
(aceQ1+aceQ1+aceQ2+aceQ3+aceQ4+aceQ5+aceQ6+aceQ7+aceQ8+aceQ9+aceQ10))
) %>%
# Calculate socre for grit
mutate (gritQ1R = 6-gritQ1, gritQ3R = 6-gritQ3, gritQ5R = 6-gritQ5, gritQ6R = 6-gritQ6) %>%
mutate (gritScore = case_when(
!is.na(gritQ1R)|!is.na(gritQ2)|!is.na(gritQ2)|!is.na(gritQ2)|!is.na(gritQ2)|
!is.na(gritQ2)|!is.na(gritQ2)|!is.na(gritQ2) ~
((gritQ1R+gritQ2+gritQ3R+gritQ4+gritQ5R+gritQ6R+gritQ7+gritQ8)/8)
))%>%
# Calculate total incarceration time in months
mutate (incarcerationTime = ((incarcerationYears-1)*12)+(incarcerationMonths-1)) %>%
# Calculate total time released
mutate (timeReleased = ageNow - ageRelease) %>%
# Calculate interval variable for poverty ratio
mutate (povertyRatio = if(as.numeric(incomeLastYr) <= 6) {
(12490+((as.numeric(incomeLastYr)-1))*4420)/(8070+(as.numeric(householdSize)*4420))
} else {
if(as.numeric(incomeLastYr) == 7) {
(59590/(8070+(as.numeric(householdSize)*4420)))
} else {
if(as.numeric(incomeLastYr) == 8) {
(62500/(8070+(as.numeric(householdSize)*4420)))
} else {
if(as.numeric(incomeLastYr) == 9) {
(87500/(8070+(as.numeric(householdSize)*4420)))
} else {
if(as.numeric(incomeLastYr) == 10) {
(125000/(8070+(as.numeric(householdSize*4420))))
} else {
(150000/(8070+(as.numeric(householdSize)*4420)))
}
}
}
}
}
) %>%
# Calculate change in income
mutate(incomeChange = incomeLastYr - incomeInitial) %>%
# Determine highest education level
mutate(educationHighest = sapply(strsplit(as.character(educationLevels), split = ","),
function(x) max(as.numeric(x)))) %>%
# Calculate binary variable indicating food insecurity
mutate(foodInsecurity = case_when(
foodSecurityQ1 == 2|foodSecurityQ1 == 3|foodSecurityQ2 == 2|foodSecurityQ2 == 3 ~ 1,
foodSecurityQ1 == 1 & foodSecurityQ2 == 1 ~ 0)
)%>%
# Calculate binary variable indicating use of any social services
mutate (programsUsedBinary = case_when(
is.na(programsUsed) ~ 0,
!is.na(programsUsed) ~ 1)
) %>%
# Determine number of public and social services used after release
mutate(countServicesAfter = count.fields(textConnection(as.character(programsUsed)), sep = ",")) %>%
# Determine number of social services used during incarceration
mutate(countHelpDuring = count.fields(textConnection(as.character(helpDuringType)), sep = ",")) %>%
# Determine number of social services used after release
mutate(countHelpAfter = count.fields(textConnection(as.character(helpAfterType)), sep = ",")) -> dataAugmented
dataAugmented %>%
subset(currentlyIncarcerated=2) %>%
subset(currentlyDetained=2) %>%
subset(residentialTreatment=2) %>%
subset(involCommitment=2) %>%
dplyr::distinct(.,.keep_all = TRUE) -> dataClean
miss_var_summary(dataClean, order = TRUE)
miss_case_summary(dataClean, order = TRUE)
print("Number of cases")
nrow(dataClean)
print("gender; 1 - male, 2 - female, 3 - other, 4 - undisclosed")
print("values")
table(as.numeric(dataClean$gender))
print("proportions")
prop.table(table(as.numeric(dataClean$gender)), margin = NULL)
print("ethnicityRace; 1 - East Asian, 2 - Central Asian, 3 - Southern Asian, 4 - Black or African-American,
5 - Hispanic or Latino, 6 - Middle Eastern or North African, 7 - Native American or Alaska,
8 - Native Hawaiian or Pacific Islander, 9 - White or European, 10 - Other")
print("values")
table(as.numeric(dataClean$ethnicityRace))
print("proportions")
prop.table(table(as.numeric(dataClean$ethnicityRace)), margin = NULL)
print("religiousAffiliation; 1 - Atheism, 2 - Agnoticism, 3 - Buddhist, 4 - Eastern Orthodox, 5 - Hindu,
6 - Islam, 7 - Jewish, 8 - Latter Day Saints, 9 - Non-denominational, 10 - Protestant,
11 - Roman Catholic, 12 - Other, 13 - prefer not to answer")
print("values")
table(as.numeric(dataClean$religousAffiliation))
print("proportions")
prop.table(table(as.numeric(dataClean$religiousAffiliation)), margin = NULL)
print("educationLevels; 1 - high schoor or GED, 2 - trade school, 3 - some college, 4 - associate,
5 - bachelor, 6 - master, 7 - doctorate")
print("values")
table(as.numeric(dataClean$educationLevels))
print("proportions")
prop.table(table(as.numeric(dataClean$educationLevels)), margin = NULL)
print("whenHighestEd; 1 - before, 2 - during, 3 - after")
print("values")
table(as.numeric(dataClean$whenHighestEd))
print("proportions")
prop.table(table(as.numeric(dataClean$whenHighestEd)), margin = NULL)
print("typeHometown; 1 - rural, 2 - suburban, 3 - urban")
print("values")
table(as.numeric(dataClean$typeHometown))
print("proportions")
prop.table(table(as.numeric(dataClean$typeHometown)), margin = NULL)
print("ageNow; ratio data (years)")
describe(as.numeric(dataClean$ageNow), na.rm = TRUE)
print("ageRelease; ratio data (years)")
describe(as.numeric(dataClean$ageRelease), na.rm = TRUE)
print("incarcerationTime; ratio data (months)")
summary(as.numeric(dataClean$incarcerationTime))
print("incomeInitial; ordinal data")
print("values")
table(as.numeric(dataClean$incomeInitial))
print("proportions")
prop.table(table(as.numeric(dataClean$incomeInitial)), margin = NULL)
print("incomeLastYr; ordinal data")
print("values")
table(as.numeric(dataClean$incomeLastYr))
print("proportions")
prop.table(table(as.numeric(dataClean$incomeLastYr)), margin = NULL)
print("selfEmployment; 1 - 0%, 2 - 1-25%, 3 - 26-50%, 4 - 51-75%, 5 - 75-99%, 6 - 100%")
print("values")
table(as.numeric(dataClean$selfEmployment))
print("proportions")
prop.table(table(as.numeric(dataClean$selfEmployment)), margin = NULL)
print("foodInsecurity; 1 - yes, 0 - no")
print("values")
table(as.numeric(dataClean$foodInsecurity))
print("proportions")
prop.table(table(as.numeric(dataClean$foodInsecurity)), margin = NULL)
reliabilityMSPSS <- cronbach (subset(dataClean, select=c(pssQ1, pssQ2, pssQ3, pssQ4, pssQ5, pssQ6, pssQ7, pssQ8, pssQ9, pssQ10, pssQ11, pssQ12)))
print("Reliability for MSPSS")
reliabilityMSPSS
reliabilityISSfamily <- cronbach (subset(dataClean, select=c(issFamilyQ1, issFamilyQ2, issFamilyQ3, issFamilyQ4, issFamilyQ5)))
print("Reliability for Family Instrumental Social Support")
reliabilityISSfamily
reliabilityISSfriend <- cronbach (subset(dataClean, select=c(issFriendQ1, issFriendQ2, issFriendQ3, issFriendQ4, issFriendQ5)))
print("Reliability for Family Instrumental Social Support")
reliabilityISSfriend
reliabilityACE <- cronbach (subset(dataClean, select=c(aceQ1, aceQ2, aceQ3, aceQ4, aceQ5, aceQ6, aceQ7, aceQ8, aceQ9, aceQ10)))
print("Reliability for ACE Scale")
reliabilityACE
reliabilityGrit <- cronbach (subset(dataClean, select=c(gritQ1R, gritQ2, gritQ3R, gritQ4, gritQ5R, gritQ6R, gritQ7, gritQ8)))
print("Reliability for Short Grit Scale")
reliabilityGrit
reliabilityHungerVitalSigns <- cronbach (subset(dataClean, select=c(foodSecurityQ1,foodSecurityQ2)))
print("Reliability for Hunger Vital Signs")
reliabilityHungerVitalSigns
# Comparison of means for `gritScore` grouped by various operationalizations of success using ANOVA
# Coding for `gritscore`: values range from 1 (low grit) to 8 (high grit)
# Null hypothesis: the means of the different groups are the same
# Alternative hypothesis: the sample mean of at least one group is not equal to the others
# Comparison of `gritScore` for cases grouped by `incomeLastYr` using ANOVA
# Coding for `incomeLastYr` (Qualitrics Q22): ordinal ranging 1 - 10
groupIncome <- group_by(dataClean, incomeLastYr)
groupIncome %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupIncome <- aov(gritScore ~ as.numeric(incomeLastYr), data = groupIncome)
summary(aovGroupIncome)
# Comparison of `gritScore` for cases grouped by `povertyLevel` using ANOVA
# Coding for `povertyLevel` (created variable): 1 - above, 0 - at or below
dataClean %>%
mutate(povertyLevel = if (povertyRatio >1) {1} else {0})-> dataClean
groupPoverty <- group_by(dataClean, povertyLevel)
groupPoverty %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupPoverty <- aov(gritScore ~ as.numeric(povertyLevel), data = groupPoverty)
summary(aovGroupPoverty)
# Comparison of `gritScore` for cases grouped by `managingFinancially` using ANOVA
# Coding for `managingFinancially` (Qualitrics Q23): 1 - not able, 2 - just able, 3 - comfortable no savings, 4 - comfortable and saving
groupFinStat <- group_by(dataClean, managingFinancially)
groupFinStat %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupFinStat <- aov(gritScore ~ as.numeric(managingFinancially), data = groupFinStat)
summary(aovGroupFinStat)
# Comparison of `gritScore` for cases grouped by `savings` using ANOVA
# Coding for `savings` (Qualitrics Q24): 1 - yes, 2 - no
groupSavings <- group_by(dataClean, savings)
groupSavings %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupSavings <- aov(gritScore ~ as.numeric(savings), data = groupSavings)
summary(aovGroupSavings)
# Null hypothesis: The two variables are independent
# Alternative hypothesis: The two variables relate to each other
ChiSqr01 <-  chisq.test(dataClean$typeHometown, dataClean$foodInsecure)
View(dataClean)
# Null hypothesis: The two variables are independent
# Alternative hypothesis: The two variables relate to each other
ChiSqr01 <-  chisq.test(dataClean$typeHometown, dataClean$foodInsecurity)
summary(ChiSqr01)
ChiSqr02 <- chisq.test(dataClean$whenHighestEd, dataClean$incomeLastYr)
summary(ChiSqr02)
# Null hypothesis: The two variables are independent
# Alternative hypothesis: The two variables relate to each other
ChiSqr01 <-  chisq.test(dataClean$typeHometown, dataClean$foodInsecurity)
ChiSqr01
ChiSqr02 <- chisq.test(dataClean$whenHighestEd, dataClean$incomeLastYr)
ChiSqr02
dataClean %>%
dplyr::select(incomeLastYr, incomeChange, povertyRatio, managingFinancially, savings, programsUsedBinary,
countServicesAfter, countHelpDuring, countHelpAfter, educationHighest, ageNow, ageRelease,
incarcerationTime, timeReleased, mspssScore, issTotalScore, aceScore, gritScore
) -> correlationDataset
col_names <- names(correlationDataset)
correlationDataset[,col_names] <- lapply(correlationDataset[,col_names], as.numeric)
correlation <- cor(correlationDataset, use="pairwise.complete.obs")
correlation
# Multiple regression using `incomeLastYr` as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(programsUsedBinary) + as.numeric(ageNow) +
as.numeric(ageRelease) + as.numeric(timeReleased) + mspssScore + issTotalScore +
aceScore + gritScore + gender + as.factor(ethnicityRace) +
as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using `povertyRatio` as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(programsUsedBinary) + as.numeric(ageNow) +
as.numeric(ageRelease) + as.numeric(timeReleased) + mspssScore + issTotalScore +
aceScore + gritScore + gender + as.factor(ethnicityRace) +
as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using `managingFinancially` as dependent variable
regressionFinStat <- lm(as.numeric(managingFinancially) ~ as.numeric(programsUsedBinary) +
as.numeric(ageNow) + as.numeric(ageRelease) + as.numeric(timeReleased) +
mspssScore + issTotalScore + aceScore + gritScore + gender +
as.factor(ethnicityRace) + as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using `savings` as dependent variable
# Prepare data
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, programsUsedBinary,
ageNow, ageRelease, mspssScore, issTotalScore, aceScore, gritScore) -> dataBinary
# Multiple regression using `incomeLastYr` as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(programsUsedBinary) + as.numeric(ageNow) +
as.numeric(ageRelease) + as.numeric(timeReleased) + mspssScore + issTotalScore +
aceScore + gritScore + gender + as.factor(ethnicityRace) +
as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using `povertyRatio` as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(programsUsedBinary) + as.numeric(ageNow) +
as.numeric(ageRelease) + as.numeric(timeReleased) + mspssScore + issTotalScore +
aceScore + gritScore + gender + as.factor(ethnicityRace) +
as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using `managingFinancially` as dependent variable
regressionFinStat <- lm(as.numeric(managingFinancially) ~ as.numeric(programsUsedBinary) +
as.numeric(ageNow) + as.numeric(ageRelease) + as.numeric(timeReleased) +
mspssScore + issTotalScore + aceScore + gritScore + gender +
as.factor(ethnicityRace) + as.factor(typeHometown),
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using `savings` as dependent variable
# Prepare data
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, managingFinancially, savings, programsUsedBinary,
ageNow, ageRelease, mspssScore, issTotalScore, aceScore, gritScore) -> dataBinary
# Remove cases with missing data in the `savings` variable
dataBinary %>%
drop_na() -> dataBinary
logitSavings <- glm(savings ~ programsUsedBinary + ageNow + ageRelease + mspssScore + issTotalScore +
aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(dataBinary$savings,
fitted(logitSavings), g=10)
print(HosLemLogitSavings)
print(cbind(HosLemLogitSavings$expected, HosLemLogitSavings$observed))
