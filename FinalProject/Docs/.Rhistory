groupPoverty %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupPoverty <- aov(gritScore ~ as.numeric(povertyLevel), data = groupPoverty)
summary(aovGroupPoverty)
# Comparison of gritScore for cases grouped by financialStatus using ANOVA
# Coding for financialStatus (Qualitrics Q23): 1 - not able, 2 - just able, 3 - comfortable no savings, 4 - comfortable and saving
groupFinStat <- group_by(dataClean, financialStatus)
groupFinStat %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupFinStat <- aov(gritScore ~ as.numeric(financialStatus), data = groupFinStat)
summary(aovGroupFinStat)
# Comparison of gritScore for cases grouped by savings using ANOVA
# Coding for savings (Qualitrics Q24): 1 - yes, 2 - no
groupSavings <- group_by(dataClean, savings)
groupSavings %>%
summarise(
count = n(),
mean = mean(gritScore, na.rm = TRUE),
sd = sd(gritScore, na.rm = TRUE)
)
aovGroupSavings <- aov(gritScore ~ as.numeric(savings), data = groupSavings)
summary(aovGroupSavings)
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> correlationDataset
col_names <- names(correlationDataset)
correlationDataset[,col_names] <- lapply(correlationDataset[,col_names], as.numeric)
correlation <- cor(correlationDataset, use="pairwise.complete.obs")
correlation
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataBinary <- as.tibble(dataBinary)
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
dataBinary%>%
mutate(savingsBinary = (savings-1)) -> dataBinary
dataClean$savings
dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
View(dataClean)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataBinary <- as.tibble(dataBinary)
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
dataBinary%>%
mutate(savingsBinary = if(savings=="2") {"1"} else {"0}"}) -> dataBinary
dataClean$savings
dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataBinary <- as.tibble(dataBinary)
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
dataBinary%>%
mutate(savingsBinary = if(savings=="2") {"1"} else {"0"}) -> dataBinary
dataClean$savings
dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savingsBinary
dataBinary%>%
mutate(savingsBinary = if(savings=="2") {"1"} else {"0"}) -> dataBinary
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary%>%
mutate(savingsBinary = if(savings=="2") {"1"} else {"0"}) -> dataBinary
dataBinary$savingsBinary
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary%>%
mutate(savingsBinary = if(as.numeric(savings)==2) {1} else {0}) -> dataBinary
dataBinary$savingsBinary
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary%>%
mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
dataBinary$savingsBinary
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary <- as.tibble(dataBinary)
dataBinary%>%
mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
dataBinary$savingsBinary
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary <- as.tibble(dataBinary)
col_names <- names(dataBinary)
dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
dataBinary%>%
mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(dataClean$savings,
fitted(logitSavings), g=10)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(dataBinary$savings,
fitted(logitSavings), g=10)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(dataBinary$savings,
fitted(logitSavings), g=10, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(logitSavings$savings,
fitted(logitSavings), g=10, na.action = na.omit)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(logitSavings$savings,
fitted(logitSavings), g=10)
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary <- na.omit(dataBinary$savings)
dataBinary$savings
# Multiple regression using incomeLastYr as dependent variable
regressionIncome <- lm(as.numeric(incomeLastYr) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionIncome)
# Multiple regressiong using povertyRatio as dependent variable
regressionPoverty <- lm(as.numeric(povertyRatio) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionPoverty)
# Multiple regression using financialStatus as dependent variable
regressionFinStat <- lm(as.numeric(financialStatus) ~ as.numeric(ageNow) + as.numeric(ageRelease) + mspssScore + aceScore + gritScore,
data = dataClean, na.action = na.omit)
summary(regressionFinStat)
# Binary logistic regression using savings as dependent variable
dataClean %>%
dplyr::select(incomeLastYr, povertyRatio, povertyLevel, financialStatus, savings, ageNow, ageRelease, mspssScore, aceScore, gritScore) -> dataBinary
dataClean$savings
dataBinary$savings
dataBinary$savings <- ifelse(dataBinary$savings==2,1,ifelse(dataBinary$savings==1,0,dataBinary$savings))
dataBinary %>%
drop_na(savings) -> dataBinary
dataBinary$savings
#dataBinary <- as.tibble(dataBinary)
#col_names <- names(dataBinary)
#dataBinary[,col_names] <- lapply(dataBinary[,col_names], as.numeric)
#dataBinary%>%
#  mutate(savingsBinary = (as.numeric(savings)-1)) -> dataBinary
#dataBinary$savingsBinary
logitSavings <- glm(savings ~ ageNow + ageRelease + mspssScore + aceScore + gritScore,
data = dataBinary, family = binomial, na.action = na.omit)
summary(logitSavings)
# Raise e to the coefficients
print(exp(coef(logitSavings)))
# Obtain various pseudo R-squared measures
print(pR2(logitSavings))
# Confidence intervals for the coefficients
print(exp(confint(logitSavings, level = 0.95)))
# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemLogitSavings <- hoslem.test(dataBinary$savings,
fitted(logitSavings), g=10)
print(HosLemLogitSavings)
print(cbind(HosLemLogitSavings$expected, HosLemLogitSavings$observed))
