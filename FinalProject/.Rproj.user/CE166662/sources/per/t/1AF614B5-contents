---
title: "R Notebook: Improving Construct Validity in Studies of Technology Transfer"
author: "Malcolm S. Townes"
date: '(`r format(Sys.time(), "%B %d, %Y")`)'
output: 
    word_document: default
    html_notebook: default
    html_document: default
    github_document: default
    always_allow_html: yes
---

## Introduction
This is an R Notebook for an investigation that explores possibilities for improving construct validity in studies of technology transfer.

## Project Set Up
The following code chunk enables the R Notebook to integrate seamlessly with the project organization format. This is normally included in the R Notebook to simplify file calls and enable file portability but it has been causing an error. To work around this problem, I've embedded the `here()` function where I enter a file path when necessary.

```{r setup-project, message = FALSE, warning = FALSE}
knitr::opts_knit$set(root.dir = here::here())
```

## Load Dependencies
The following code chunk loads package dependencies required to perform the necessary tasks. Basic tasks include importing, reading, wrangling, and cleaning data; selecting a subset of the data; checking for unique observations; analyzing missing data; and performing various types of regression analyses. 
```{r load-dependencies, message = FALSE, warning = FALSE}
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(expss) # functions for calculating on values
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for pseudo R2 measures for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemeshow goodness of fit test
```

## Load Raw Data
The following code chunk imports the raw data from the `txt` file for the NBER data set for the period 1963 to 1999.
```{r import-data, message = FALSE, warning = FALSE}
DataRaw <- read.table(here("DataRaw","NBERpatents1963to1999/apat63_99.txt"), 
                      sep = ",", header = TRUE, fill = TRUE, dec = ".")
```

## Subset Data
The following code chunk creates a subset of the data for the period 1990 through 1995.
```{r subset-data-90-95, message = FALSE, warning = FALSE}
DataRaw %>% # subset data
  filter(GYEAR>=1990) %>%
  filter(GYEAR<=1995) -> DataSubset90to95
DataSubset90to95 <- as_tibble(DataSubset90to95) # convert data frame to tibble
```

## Extract Sample Data
The following code chunk takes a sample of 2,000 cases from the data subset for the period 1990 through 1995.
``` {r sample-90-95, message = FALSE, warning = FALSE}
set.seed(1972)
Sample90to95 <- sample(1:nrow(DataSubset90to95), size = 2000, 
                       replace = TRUE, prob = NULL)
Sample90to95 <- DataSubset90to95[Sample90to95,]
Sample90to95 <- as_tibble(Sample90to95)
```

## Inspect Self-Citation Variables
```{r self-citation-vars}
print(count_if(gt(0),Sample90to95$SELFCTUB))
print(count_if(gt(0),Sample90to95$SELFCTLB))
print(count_if(gt(0),Sample90to95$SECDUPBD))
print(count_if(gt(0),Sample90to95$SECDLWBD))
```

## Clean Data 01
The following code chunk reorganizes the variables and eliminates variables not used in the analysis.
```{r clean-data-01, message = FALSE, warning = FALSE}
Sample90to95 %>%
  dplyr::select(PATENT, GYEAR, CRECEIVE, CAT, CLAIMS, CMADE, GENERAL, 
                ORIGINAL, FWDAPLAG, BCKGTLAG) -> Sample90to95A 
# Another package also has a `select()` function
```

## Inspect Sample Data
The following code chunk evaluates the data sample to determine if additional data cleaning is necessary.  It first checks for missing data for each variable.  It then checks for missing data for each variable in each case.  Then it checks for duplicate cases with the `PATENT` variable to determine if that variable can be used as a unique identifier for each case.  Finally, it checks for duplicate cases across all variables to ensure that each case is unique.
```{r inspect-data, message = FALSE, warning = FALSE}
miss_var_summary(Sample90to95A, order = TRUE)
miss_case_summary(Sample90to95A, order = TRUE)
get_dupes(Sample90to95A, PATENT)
get_dupes(Sample90to95A)
```

## Adjust for Missing Data
The following code chunk modifies cases with missing data, removes duplicate cases, and then evaluates the data sample to determine if additional cleaning is necessary. It first assigns a value of `0` to instances of `NA` in the data for the `GENERAL` variable. It then assigns a value of `1` to instances of `NA` in the data for the `ORIGINAL` variable. For the `FWDAPLAG` and `BCKGTLAG` variables it assigns the maximum value in the data for each variable to instances of missing data. It then removes duplicate cases. The code chunk then checks for missing data for each variable in each case and missing data for each case. Then it checks for duplicate cases with the `PATENT` variable to determine if that variable can be used as a unique identifier for each case.  Finally, it checks for duplicate observations across all variables to ensure that each case is unique.
```{r missing-data, message = FALSE, warning = FALSE}
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG, na.rm = TRUE)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG, na.rm = TRUE)

Sample90to95B %>%
  distinct() -> Sample90to95B

miss_var_summary(Sample90to95B, order = TRUE)
miss_case_summary(Sample90to95B, order = TRUE)
get_dupes(Sample90to95B, PATENT)
get_dupes(Sample90to95B)
```

## Calculate Measures of Central Tendency
The following code chunk calculates measures of central tendency in the sample data for each of the variables.
```{r central-tendency, message = FALSE, warning = FALSE}
summary(Sample90to95B)
```

## Prepare Histograms
The following code chunk displays histograms for the variables to enable visual inspection of the data to evaluate whether or not they fit normal distributions. The code chunk generates separate `png` files for each histogram, which are saved in the `Results` folder.
```{r histograms, message = FALSE, warning = FALSE}
ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(GYEAR))
ggsave(here("results", "histogramGYEAR.png"), dpi = 300)
ggsave(here("results", "histogramGYEAR.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(CRECEIVE))
ggsave(here("Results", "histogramCRECEIVE.png"), dpi = 300)
ggsave(here("Results", "histogramCRECEIVE.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(CAT))
ggsave(here("Results", "histogramCAT.png"), dpi = 300)
ggsave(here("Results", "histogramCAT.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(CLAIMS))
ggsave(here("Results", "histogramCLAIMS.png"), dpi = 300)
ggsave(here("Results", "histogramCLAIMS.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(CMADE))
ggsave(here("Results", "histogramCMADE.png"), dpi = 300)
ggsave(here("Results", "histogramCMADE.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(GENERAL))
ggsave(here("Results", "histogramGENERAL.png"), dpi = 300)
ggsave(here("Results", "histogramGENERAL.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(ORIGINAL))
ggsave(here("Results", "histogramORIGINAL.png"), dpi = 300)
ggsave(here("Results", "histogramORIGINAL.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(FWDAPLAG))
ggsave(here("Results", "histogramFWDAPLAG.png"), dpi = 300)
ggsave(here("Results", "histogramFWDAPLAG.jpg"), dpi = 300)

ggplot() +
  geom_histogram(Sample90to95B, mapping = aes(BCKGTLAG))
ggsave(here("Results", "histogramBCKGTLAG.png"), dpi = 300)
ggsave(here("Results", "histogramBCKGTLAG.jpg"), dpi = 300)
```

## Prepare Scatter Plots
The following code chunk displays scatter plots with `CRECEIVE` as the dependent variable against each of the the independent variables to visually inspect for linear relationships between the dependent variable and each of the independent variables. The code chunk generates separate `png` files for each scatter plot, which are saved in the `Results` folder.
```{r scatter-plots, message = FALSE, warning = FALSE}
ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = GYEAR, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyGYEAR.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyGYEAR.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = CAT, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCAT.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyCAT.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = CLAIMS, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCLAIMS.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyCLAIMS.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = CMADE, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCMADE.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyCMADE.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = GENERAL, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyGENERAL.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyGENERAL.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = ORIGINAL, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyORIGINAL.jpg"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyORIGINAL.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = FWDAPLAG, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyFWDAPLAG.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyFWDAPLAG.jpg"), dpi = 300)

ggplot() +
  geom_point(Sample90to95B, mapping = aes(x = BCKGTLAG, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyBCKGTLAG.png"), dpi = 300)
ggsave(here("results", "scatterCRECEIVEbyBCKGTLAG.jpg"), dpi = 300)
```

## Prepare Q-Q Plots
The following code chunk displays Quantile-Quantile (Q-Q) plots to check for normal distribution in the data sample for each variable. The code chunk generates separate `png` files for each Q-Q plot, which are saved in the `Results` folder.
```{r qq-plots, message = FALSE, warning = FALSE}
ggplot(Sample90to95B)+
  aes(sample = GYEAR)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("GYEAR Q-Q Plot")
ggsave(here("Results", "QQplotGYEAR.png"))
ggsave(here("Results", "QQplotGYEAR.jpg"))

ggplot(Sample90to95B)+
  aes(sample = CRECEIVE)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("CRECEIVE Q-Q Plot")
ggsave(here("Results", "QQplotCRECEIVE.png"))
ggsave(here("Results", "QQplotCRECEIVE.jpg"))

ggplot(Sample90to95B)+
  aes(sample = CLAIMS)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("CLAIMS Q-Q Plot")
ggsave(here("Results", "QQplotCLAIMS.png"))
ggsave(here("Results", "QQplotCLAIMS.jpg"))

ggplot(Sample90to95B)+
  aes(sample = CMADE)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("CMADE Q-Q Plot")
ggsave(here("Results", "QQplotCMADE.png"))
ggsave(here("Results", "QQplotCMADE.jpg"))

ggplot(Sample90to95B)+
  aes(sample = GENERAL)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("GENERAL Q-Q Plot")
ggsave(here("Results", "QQplotGENERAL.png"))
ggsave(here("Results", "QQplotGENERAL.jpg"))

ggplot(Sample90to95B)+
  aes(sample = ORIGINAL)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("ORIGINAL Q-Q Plot")
ggsave(here("Results", "QQplotORIGINAL.png"))
ggsave(here("Results", "QQplotORIGINAL.jpg"))

ggplot(Sample90to95B)+
  aes(sample = FWDAPLAG)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("FWDAPLAG Q-Q Plot")
ggsave(here("Results", "QQplotFWDAPLAG.png"))
ggsave(here("Results", "QQplotFWDAPLAG.jpg"))

ggplot(Sample90to95B)+
  aes(sample = BCKGTLAG)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("BCKGTLAG Q-Q Plot")
ggsave(here("Results", "QQplotBCKGTLAG.png"))
ggsave(here("Results", "QQplotBCKGTLAG.jpg"))
```

## Calculate Pairwise Correlation Coefficients
The following code chunk calculates the pairwise correlation coefficients for all variables in the sample data using the Pearson product-moment correlation function.
```{r cor-matrix, message = FALSE, warning = FALSE}
Sample90to95corrmatrix <- cor(Sample90to95B)
print(Sample90to95corrmatrix)
```

## Modify Data 01
The following code chunk creates additional variables needed for the binary logistic regression, ordinal logistic regression, and multiple regression analyses. It first creates a new variable called `CRECbinary` that converts the `CRECEIVE` variable into a dichotomous variable. It then creates a series of dummy variables for the nominal `CAT` variable to use in multiple regression analysis.
```{r modify-data-01, message = FALSE, warning = FALSE}
Sample90to95B %>%
  mutate(CRECbinary = ifelse(CRECEIVE == 0, 0, 1)) %>%
  mutate(CAT01 = ifelse(CAT == 1, 1, 0)) %>%
  mutate(CAT02 = ifelse(CAT == 2, 1, 0)) %>%
  mutate(CAT03 = ifelse(CAT == 3, 1, 0)) %>%
  mutate(CAT04 = ifelse(CAT == 4, 1, 0)) %>%
  mutate(CAT05 = ifelse(CAT == 5, 1, 0)) %>%
  mutate(CAT06 = ifelse(CAT == 6, 1, 0)) -> Sample90to95C
```

## Count Observations 01
The following code chunk calculates the number of observations for each outcome of each nominal and ordinal variable to determine if the sample size is large enough for logistic regression analysis, which requires at least 10 observations for the least frequent outcome for each variable.
```{r count-obs-01, message = FALSE, warning = FALSE}
Sample90to95C %>%
  group_by(GYEAR) %>%
  summarize(n())

Sample90to95C %>%
  group_by(CRECEIVE) %>%
  summarize(n())

Sample90to95C %>%
  group_by(CRECbinary) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT01) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT02) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT03) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT04) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT05) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CAT06) %>%
  summarize(n())

Sample90to95C %>%  
  group_by(CLAIMS) %>%
  summarize(n())

Sample90to95C %>%    
  group_by(CMADE) %>%
  summarize(n())
```

## Modify Data 02
The following code chunk groups cases where the outcome level for `CRECEIVE` is greater than or equal to 15 citations because most outcome levels above 15 citations do not have enough cases individually for logistic regression analysis, which requires at least 10 cases for the least frequent outcome level of each variable. This was also done to simplify the ordinal logistic regression analysis.
```{r modify-data-02, message = FALSE, warning = FALSE}
Sample90to95C %>% 
  mutate(CRECordinal = ifelse (CRECEIVE>=15,15,CRECEIVE)) -> Sample90to95C
Sample90to95C <- as_tibble(Sample90to95C) # convert data frame to tibble
```

## Count Observations 02
The following code chunk calculates the number of observations for each outcome level of the new `CRECordinal` variable.
```{r count-obs-02, message = FALSE, warning = FALSE}
Sample90to95C %>%
  group_by(CRECordinal) %>%
  summarize(n())
```

## Binary Logistic Regression Analysis
The following code chunk uses the new dichotomous variable `CRECbinary` as the dependent variable in a binary logistic regression analysis. It then displays the results. It also calculates the odds ratio, various pseudo R-squared measures, confidence intervals for the coefficients, and Hosmer-Lemeshow goodness of fit test.
```{r binary-regression, message = FALSE, warning = FALSE}
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + 
                       ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, 
                     data = Sample90to95C, family = binomial, 
                     na.action = na.omit)
summary(logitCRECEIVE)

# Raise e to the coefficients
print(exp(coef(logitCRECEIVE)))

# Obtain various pseudo R-squared measures
print(pR2(logitCRECEIVE))

# Confidence intervals for the coefficients
print(exp(confint(logitCRECEIVE, level = 0.95)))

# Hosmer-Lemeshow Goodness of Fit Test
HosLemBinomial <- hoslem.test(Sample90to95C$CRECbinary, 
                              fitted(logitCRECEIVE), g=10)
print(HosLemBinomial)
print(cbind(HosLemBinomial$expected, HosLemBinomial$observed))
```

## Modify Data 03
The following code chunk creates a new variable called `CRECmdnSplt` using a median split of the `CRECEIVE` values. It then calculates the number of observations for each outcome level of the new variable.
```{r modify-data-03}
Sample90to95C %>%
  mutate(CRECmdnSplt = ifelse(CRECEIVE <= median(CRECEIVE),0,1)) -> Sample90to95C

Sample90to95C %>%
  group_by(CRECordinal) %>%
  summarize(n())
```

## Binomial Logistic Regression 02
The following code chunk uses the new dichotomous variable `CRECmdnSplt` as the dependent variable in a binary logistic regression analysis. It then displays the results. It also calculates the odds ratio, various pseudo R-squared measures, confidence intervals for the coefficients, and Hosmer-Lemeshow goodness of fit test.
```{r binary-regression-02, message = FALSE, warning = FALSE}
logitCRECEIVE02 <- glm(CRECmdnSplt ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + 
                       ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, 
                     data = Sample90to95C, family = binomial, 
                     na.action = na.omit)
summary(logitCRECEIVE02)

# Raise e to the coefficients
print(exp(coef(logitCRECEIVE02)))

# Obtain various pseudo R-squared measures
print(pR2(logitCRECEIVE02))

# Confidence intervals for the coefficients
print(exp(confint(logitCRECEIVE02, level = 0.95)))

# Hosmer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemBinomial02 <- hoslem.test(Sample90to95C$CRECmdnSplt, 
                              fitted(logitCRECEIVE02), g=10)
print(HosLemBinomial02)
print(cbind(HosLemBinomial02$expected, HosLemBinomial02$observed))
```

## Ordinal Logistic Regression Analysis
The following code chunk performs an ordinal logistic regression analysis on the data sample using `CRECordinal` as the dependent variable. It then displays the results. It performs the analysis two different ways for comparison.
```{r ordinal-regression, message = FALSE, warning = FALSE}
# Ordinal Logistic Regression Results - Method 01
CRECEIVEordinal01 <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + 
                           CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + 
                           BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal01)

# Ordinal Logistic Regression Results - Method 02
CRECEIVEordinal02 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) +
                            CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG +
                            BCKGTLAG, data = Sample90to95C, Hess = TRUE, 
                          model = TRUE, method = "logistic")
summary(CRECEIVEordinal02)

# Calculate P-Values for Coefficients
coefsOrdinal <- coefficients(summary(CRECEIVEordinal02))
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal02$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal01, "p values (Normal)" = round(pval, 5))
print(coefsOrdinal01)

# Raise e to the coefficients
print(exp(coef(CRECEIVEordinal01)))

# Obtain various pseudo R-squared measures
print(pR2(CRECEIVEordinal02))

# Confidence intervals for the coefficients
print(exp(confint(CRECEIVEordinal01, level = 0.95)))

# Hosemer-Lemeshow Goodness of Fit Test
# Null hypothesis: the model is a good fit for the data
# Alternative hypothesis: the model is NOT a good fit for the data
HosLemOrdinal <- hoslem.test(Sample90to95C$CRECordinal,
                             fitted(CRECEIVEordinal01), g=10)
print(HosLemOrdinal)
print(cbind(HosLemOrdinal$expected, HosLemOrdinal$observed))
```

## Multiple Regression Model Selection
The following code chunk creates regression subsets using the exhaustive algorithm with `CRECEIVE` as the dependent variable.  It then displays the summary statistics to facilitate selection of the best regression model on which to focus.
```{r regression-subsets, message = FALSE, warning = FALSE}
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + 
                               CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + 
                               BCKGTLAG, data = Sample90to95C, 
                             nbest = 2, method = "exhaustive")
summary(CRECregsubsets,all.best=FALSE, matrix=TRUE)
plot(CRECregsubsets, scale = "adjr2")
```

## Multiple Regression Analysis
The following code chunk performs a multiple regression analysis on the data sample using the selected variables. It then displays the results.
```{r multiple-regression, message = FALSE, warning = FALSE}
# Multiple Regression
CRECEIVEregression <- lm(CRECEIVE ~ GYEAR + CAT02 + CAT03 + CAT04 + CLAIMS + 
                           ORIGINAL + GENERAL + FWDAPLAG, 
                         data = Sample90to95C, na.action = na.omit)
summary(CRECEIVEregression)
```

## Check Linear Regression Assumptions
The following code chunk performs various checks to determine if the model satisfies the assumptions of linear regression.
```{r assumptions-check-01, message = FALSE, warning = FALSE}
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)

# View residuals
png(filename = here("Results","MultRegres01ModelResidualsPlotA.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()

jpeg(filename = here("Results","MultRegres01ModelResidualsPlotA.jpg"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()

ggplot(CRECEIVEregression)+
  aes(x=.fitted, y=.resid)+
  geom_point()
ggsave(here("Results","MultRegres01ModelResidualsPlotB.png"))
ggsave(here("Results","MultRegres01ModelResidualsPlotB.jpg"))

# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)

# Check for normality of residuals
# Check for homoscedasticity of residuals or equal variance
png(filename = here("Results", "MultRegres01ModelResidualsDistribution.png"))
par(mfrow=c(2,2)) # set 2 rows and 2 column layout for plot
plot(CRECEIVEregression)
dev.off()

jpeg(filename = here("Results", "MultRegres01ModelResidualsDistribution.jpg"))
par(mfrow=c(2,2)) # set 2 rows and 2 column layout for plot
plot(CRECEIVEregression)
dev.off()

# Check for autocorrelation of residuals using Durbin-Watson test
# Null hypothesis: true autocorrelation is zero
# Alternative hypothesis: true autocorrelation is greater than zero
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)

# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)

CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)

CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)

CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)

CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)

CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)

# Check that the variability in independent variable values is positive
varGYEAR <- var(Sample90to95C$GYEAR)
print(varGYEAR)

varCAT02 <- var(Sample90to95C$CAT02)
print(varCAT02)

varCAT03 <- var(Sample90to95C$CAT03)
print(varCAT03)

varCAT04 <- var(Sample90to95C$CAT04)
print(varCAT04)

varCAT05 <- var(Sample90to95C$CAT05)
print(varCAT05)

varCAT06 <- var(Sample90to95C$CAT06)
print(varCAT06)

varCLAIMS <- var(Sample90to95C$CLAIMS)
print(varCLAIMS)

varCMADE <- var(Sample90to95C$CMADE)
print(varCMADE)

varGENERAL <- var(Sample90to95C$GENERAL)
print(varGENERAL)

varORIGINAL <- var(Sample90to95C$ORIGINAL)
print(varORIGINAL)

varFWDAPLAG <- var(Sample90to95C$FWDAPLAG)
print(varFWDAPLAG)

varBCKGTLAG <- var(Sample90to95C$BCKGTLAG)
print(varBCKGTLAG)

# Calculate Variance Inflation Factors to check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
print(VIFregression)
```

## Modify Data 04
The following code chunk removes cases in which `CRECEIVE` is greater than or equal to 10 as outliers and applies a transformation to the `CRECEIVE` variable in an effort to better satisfy the assumptions of linear regression and improve the model.
```{r modify-data-04, message = FALSE, warning = FALSE}
Sample90to95C %>% 
  filter(CRECEIVE <= 10) %>%
  mutate(CRECEIVEsqrt = sqrt(CRECEIVE)) -> Sample90to95D
```

## Q-Q Plots for Transformed Dependent Variable
The following code chunk creates a Quantile-Quantile (Q-Q) plot for the transformed dependent variable to check for suitability to use in multiple regression analysis.
```{r qq-plots-transformed, message = FALSE, warning = FALSE}
ggplot(Sample90to95D)+
  aes(sample = CRECEIVEsqrt)+
  stat_qq()+
  stat_qq_line()+
  ggtitle("CRECEIVEsqrt Q-Q Plot")
ggsave(here("Results", "QQplotCRECEIVEsqrt.png"))
ggsave(here("Results", "QQplotCRECEIVEsqrt.jpg"))
```

## Multiple Regression Using Transformed Dependent Variable 
The following code chunk performs a multiple regression analysis using the transformed dependent variable and displays the results.
```{r multiple-regression-trfm, message = FALSE, warning = FALSE}
# Multiple Regression with Transformed Dependent Variable
CRECEIVEregressionTrfm <- lm(CRECEIVEsqrt ~ GYEAR + CAT02 + CAT03 + CAT04 + 
                               CLAIMS + ORIGINAL + GENERAL + FWDAPLAG, 
                             data = Sample90to95D, na.action = na.omit)
summary(CRECEIVEregressionTrfm)
```

## Check Linear Regression Assumptions for Transformed Variables
The following code chunk performs various checks to determine if the model satisfies the assumptions of linear regression.
```{r assumptions-check-trfm, message = FALSE, warning = FALSE}
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)

# View residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
png(filename = here("Results","MultRegresTrfmModelResidualsPlotA.png"))
plot(CRECEIVEresidTrfm)
dev.off()

CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
jpeg(filename = here("Results","MultRegresTrfmModelResidualsPlotA.jpg"))
plot(CRECEIVEresidTrfm)
dev.off()

ggplot(CRECEIVEregressionTrfm)+
  aes(x=.fitted, y=.resid)+
  geom_point()
ggsave(here("Results","MultRegresTrfmModelResidualsPlotB.png"))
ggsave(here("Results","MultRegresTrfmModelResidualsPlotB.jpg"))

# Check that mean of residuals equals zero
mean(CRECEIVEregressionTrfm$residuals)

# Check for normality of residuals
# Check for homoscedasticity of residuals or equal variance
png(filename = here("Results", "MultRegresTrfmModelResidualsDistribution.png"))
par(mfrow=c(2,2)) # set 2 rows and 2 column layout for plot
plot(CRECEIVEregressionTrfm)
dev.off()

jpeg(filename = here("Results", "MultRegresTrfmModelResidualsDistribution.jpg"))
par(mfrow=c(2,2)) # set 2 rows and 2 column layout for plot
plot(CRECEIVEregressionTrfm)
dev.off()

# Check for autocorrelation of residuals using Durbin-Watson test
# Null hypothesis: true autocorrelation is zero
# Alternative hypothesis: true autocorrelation is greater than zero
AutoCorrTrfm <- dwtest(CRECEIVEregressionTrfm)
print(AutoCorrTrfm)

# Check that the independent variables and the residuals are uncorrelated
CorrGYEARtrfm <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
print(CorrGYEARtrfm)

CorrCATtrfm <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
print(CorrCATtrfm)

CorrCLAIMStrfm <- cor.test(Sample90to95D$CLAIMS, CRECEIVEregressionTrfm$residuals)
print(CorrCLAIMStrfm)

CorrORIGINALtrfm <- cor.test(Sample90to95D$ORIGINAL, CRECEIVEregressionTrfm$residuals)
print(CorrORIGINALtrfm)

CorrGENERALtrfm <- cor.test(Sample90to95D$GENERAL, CRECEIVEregressionTrfm$residuals)
print(CorrGENERALtrfm)

CorrFWDAPLAGtrfm <- cor.test(Sample90to95D$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
print(CorrFWDAPLAGtrfm)

# Check that the variability in independent variable values is positive
varGYEARtrfm <- var(Sample90to95D$GYEAR)
print(varGYEARtrfm)

varCAT02trfm <- var(Sample90to95D$CAT02)
print(varCAT02trfm)

varCAT03trfm <- var(Sample90to95D$CAT03)
print(varCAT03trfm)

varCAT04trfm <- var(Sample90to95D$CAT04)
print(varCAT04trfm)

varCAT05trfm <- var(Sample90to95D$CAT05)
print(varCAT05trfm)

varCAT06trfm <- var(Sample90to95D$CAT06)
print(varCAT06trfm)

varCLAIMStrfm <- var(Sample90to95D$CLAIMS)
print(varCLAIMStrfm)

varCMADEtrfm <- var(Sample90to95D$CMADE)
print(varCMADEtrfm)

varGENERALtrfm <- var(Sample90to95D$GENERAL)
print(varGENERALtrfm)

varORIGINALtrfm <- var(Sample90to95D$ORIGINAL)
print(varORIGINALtrfm)

varFWDAPLAGtrfm <- var(Sample90to95D$FWDAPLAG)
print(varFWDAPLAGtrfm)

varBCKGTLAGtrfm <- var(Sample90to95D$BCKGTLAG)
print(varBCKGTLAGtrfm)

# Calculate Variance Inflaction Factors to check for perfect multicollinearity among the variables
VIFregressionTrfm <- vif(CRECEIVEregressionTrfm)
print(VIFregressionTrfm)
```

## Save Data
The following code chunk saves the final cleaned and modified data that was used in the analysis.
```{r save-data, message = FALSE, warning = FALSE}
write.csv(Sample90to95C, here("DataClean","NBERpatents1963to1999","NBERPatCitSample90to95C.csv"), append = FALSE)
write.csv(Sample90to95D, here("DataClean","NBERpatents1963to1999","NBERPatCitSample90to95D.csv"), append = FALSE)
```
